name: Release on major/minor change


on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (x.y.z). If empty, use pom.xml."
        required: false
        type: string
      notes:
        description: "Release notes (only used when 'version' is provided)."
        required: false
        type: string

permissions:
  contents: write

jobs:
  decide-and-release:
    runs-on: ubuntu-latest

    steps:
      # 0. Checkout (needed in both modes to access pom.xml and tags)
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # we need tags

      # 1. Install JDK 17 and xmllint
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
      - name: Ensure xmllint available
        run: |
          if ! command -v xmllint >/dev/null 2>&1; then
            sudo apt-get update
            sudo apt-get install -y libxml2-utils
          fi

      # 2. Determine "current version" to use:
      #    - If manually triggered with input.version -> use that
      #    - Else read from pom.xml
      - name: Resolve current version
        id: curr
        run: |
          INPUT_VER="${{ github.event.inputs.version }}"

          if [ -n "$INPUT_VER" ]; then
            echo "Using workflow_dispatch input version: $INPUT_VER"
            VERSION="$INPUT_VER"
            MODE="manual"
          else
            echo "No manual version provided. Reading from pom.xml..."
            VERSION=$(xmllint --xpath "/*[local-name()='project']/*[local-name()='version']/text()" pom.xml 2>/dev/null || true)
            if [ -z "$VERSION" ]; then
              echo "ERROR: couldn't read <version> from pom.xml and no manual version given."
              exit 1
            fi
            MODE="auto"
          fi

          echo "current_version=$VERSION" >> $GITHUB_OUTPUT
          echo "mode=$MODE" >> $GITHUB_OUTPUT

          # split x.y.z
          IFS='.' read -r CUR_MAJ CUR_MIN CUR_PATCH <<< "$VERSION"
          echo "cur_major=$CUR_MAJ" >> $GITHUB_OUTPUT
          echo "cur_minor=$CUR_MIN" >> $GITHUB_OUTPUT
          echo "cur_patch=$CUR_PATCH" >> $GITHUB_OUTPUT

      # 3. Get the latest released version tag from GitHub (fallback 0.0.0 if none)
      - name: Get latest release tag
        id: prev
        run: |
          API_URL="https://api.github.com/repos/${{ github.repository }}/releases/latest"
          RESP=$(curl -sSL -H "Accept: application/vnd.github+json" "$API_URL")

          TAG_NAME=$(echo "$RESP" | jq -r .tag_name)

          if [ "$TAG_NAME" = "null" ] || [ -z "$TAG_NAME" ]; then
            TAG_NAME="0.0.0"
          fi

          # strip leading "v" if tags are like v1.2.3
          TAG_NAME="${TAG_NAME#v}"

          echo "previous_version=$TAG_NAME" >> $GITHUB_OUTPUT

          IFS='.' read -r PREV_MAJ PREV_MIN PREV_PATCH <<< "$TAG_NAME"
          echo "prev_major=$PREV_MAJ" >> $GITHUB_OUTPUT
          echo "prev_minor=$PREV_MIN" >> $GITHUB_OUTPUT
          echo "prev_patch=$PREV_PATCH" >> $GITHUB_OUTPUT

      # 4. Extract release notes source
      #    - If mode=auto   -> read <description> from pom.xml
      #    - If mode=manual -> read workflow_dispatch input "notes"
      - name: Resolve release notes
        id: notes
        run: |
          MODE=${{ steps.curr.outputs.mode }}

          if [ "$MODE" = "auto" ]; then
            echo "Mode is auto. Using <description> from pom.xml as release notes."
            DESC=$(xmllint --xpath "/*[local-name()='project']/*[local-name()='description']/text()" pom.xml 2>/dev/null || true)

            # If pom.xml has no <description>, fall back to a generic message
            if [ -z "$DESC" ]; then
              DESC="Automated release for version ${{ steps.curr.outputs.current_version }}."
            fi

            echo "release_notes<<'EOF'" >> $GITHUB_OUTPUT
            echo "$DESC" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT

          else
            echo "Mode is manual. Using workflow_dispatch input notes."
            MANUAL_NOTES="${{ github.event.inputs.notes }}"

            if [ -z "$MANUAL_NOTES" ]; then
              echo "ERROR: Manual run requires 'notes' input."
              exit 1
            fi

            echo "release_notes<<'EOF'" >> $GITHUB_OUTPUT
            echo "$MANUAL_NOTES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      # 5. Decide if we should release (major/minor change only)
      - name: Decide release eligibility
        id: gate
        run: |
          echo "Current:  ${{ steps.curr.outputs.current_version }}"
          echo "Previous: ${{ steps.prev.outputs.previous_version }}"

          CUR_MAJ=${{ steps.curr.outputs.cur_major }}
          CUR_MIN=${{ steps.curr.outputs.cur_minor }}
          PREV_MAJ=${{ steps.prev.outputs.prev_major }}
          PREV_MIN=${{ steps.prev.outputs.prev_minor }}

          SHOULD_RELEASE="no"
          if [ "$CUR_MAJ" != "$PREV_MAJ" ] || [ "$CUR_MIN" != "$PREV_MIN" ]; then
            SHOULD_RELEASE="yes"
          fi

          echo "should_release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT

      # 6. Stop if only PATCH changed
      - name: Stop if not releasing
        if: steps.gate.outputs.should_release == 'no'
        run: |
          echo "Patch-only update (${{ steps.prev.outputs.previous_version }} -> ${{ steps.curr.outputs.current_version }})."
          echo "No new release will be created."
          exit 0

      # 7. Create the GitHub Release (only if major/minor changed)
      - name: Install JRI JAR to local Maven repo
        if: steps.gate.outputs.should_release == 'yes'
        run: |
          mvn install:install-file \
            -Dfile=lib/JRI-1.0.jar \
            -DgroupId=jri \
            -DartifactId=jri \
            -Dversion=1.0 \
            -Dpackaging=jar \
            -DgeneratePom=true
      - name: Build JAR
        if: steps.gate.outputs.should_release == 'yes'
        run: |
          mvn clean package install
      - name: Create Release
        if: steps.gate.outputs.should_release == 'yes'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.curr.outputs.current_version }}
          name: Release ${{ steps.curr.outputs.current_version }}
          generate_release_notes: true
          files: |
            bin/*jar
          body: ${{ steps.notes.outputs.release_notes }}
          draft: false
          prerelease: false

      # 8. Notify fastreeR repository to update its backend version
      #- name: Notify fastreeR repository
      #  if: steps.gate.outputs.should_release == 'yes'
      #  run: |
      #    curl -X POST https://api.github.com/repos/gkanogiannis/fastreeR/dispatches \
      #      -H "Accept: application/vnd.github+json" \
      #      -H "Authorization: Bearer ${{ secrets.FASTREER_PAT }}" \
      #      -d '{"event_type": "backend_released", "client_payload": {"backend_version": "${{ steps.curr.outputs.current_version }}"}}'
